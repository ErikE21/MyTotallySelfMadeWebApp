@using System.Drawing
@using static AppModels.Models.StringExtensions
@model List<AppModels.Models.yourPokemon>
@{
    var TypeColors = ViewBag.TypeColors as Dictionary<string, Color>;
}
<head>
    <link rel="stylesheet" href="/css/StyleSheet.css">
</head>
<body>
    @functions {
        private string GetTd(int id, string spriteUrl, string name)
        {
            return $"<td class='art-column'><img src={spriteUrl} height=150/></td>" +
            $"<td class='Name-column' width: 15%'>{name}</td>";
        }

        private string GetTypeColorStyle(Dictionary<string, Color> typeColors, string typeName)
        {
            if (typeColors.TryGetValue(typeName, out var color))
            {
                return $"rgba({color.R},{color.G},{color.B},{color.A})";
            }
            return "transparent";
        }
    }
    @if (Model.Count == 0 || Model is null)
    {
        <h1 style="text-align:center">Your team has no pokemon</h1>
    }
    else
    {
        <div class="text-center" style="border-collapse: collapse;width: auto;">
            <table>
                <tr>
                    <th>Artwork</th>
                    <th>Name</th>
                    <th>Type(s)</th>
                    <th>Ability</th>
                    <th>Moves</th>
                    <th>IVs</th>
                    <th>Edit Details</th>
                    <th>Remove</th>
                </tr>
                @foreach (var pokemon in Model)
                {
                    string spriteURL = pokemon.pokemon.Sprites.Other.OfficialArtwork.FrontDefault;
                    if (pokemon.shiny)
                    {
                        spriteURL = pokemon.pokemon.Sprites.Other.OfficialArtwork.FrontShiny;
                    }
                    string pokename = (pokemon.pokemon.Name.Capitalize());
                    if (!string.IsNullOrEmpty(pokemon.nickname))
                    {
                        pokename = pokemon.nickname;
                    }
                    var tdContent = GetTd(pokemon.pokemon.Id, spriteURL, pokename);
                    var typeColor1 = GetTypeColorStyle(TypeColors, pokemon.pokemon.Types[0].Type.Name);
                    var typeColor2 = "transparent";
                    var imgUrl1 = Url.Content($"~/images/{pokemon.pokemon.Types[0].Type.Name.ToLower()}.png");
                    var imgUrl2 = Url.Content("");
                    if (pokemon.pokemon.Types.Count == 1)
                    {
                        typeColor2 = GetTypeColorStyle(TypeColors, pokemon.pokemon.Types[0].Type.Name);
                    }
                    else
                    {
                        typeColor2 = GetTypeColorStyle(TypeColors, pokemon.pokemon.Types[1].Type.Name);
                        imgUrl2 = Url.Content($"~/images/{pokemon.pokemon.Types[1].Type.Name.ToLower()}.png");

                    }
                    <tr style="background-color: #D9AFD9;background-image: linear-gradient(45deg, @typeColor1 0%, @typeColor2 100%);font-size:x-large;">
                        @Html.Raw(tdContent)
                        <td class="type-column">
                            @{
                                var imgUrl = Url.Content($"~/images/{pokemon.pokemon.Types[0].Type.Name.ToLower()}.png");
                            }
                            <img src="@imgUrl1" height="30" />
                            @if (pokemon.pokemon.Types.Count >= 2)
                            {
                                <img src="@imgUrl2" height="30" />
                            }
                        </td>
                        <td>@(pokemon.ability.Capitalize())</td>
                        <td>
                            @if (!pokemon.moves.All(x => x == null))
                            {
                                @foreach (var move in pokemon.moves.Where(x => !string.IsNullOrEmpty(x)))
                                {
                                    <p> @($"- {move}")</p>
                                }
                                @foreach (var move in pokemon.moves.Where(x => string.IsNullOrEmpty(x)))
                                {
                                    <p> @($"- {move}")</p>
                                }
                            }
                            else
                            {
                                <p>-</p>
                                <p>-</p>
                                <p>-</p>
                                <p>-</p>
                            }
                        </td>
                        <td>
                            @foreach (var value in pokemon.IVs)
                            {
                                <p> @($"{value.Key}: {value.Value}/31")</p>
                            }
                        </td>
                        <td>
                            <form asp-action='EditPoke'>
                                <input type='hidden' name='id' value='@pokemon.teamPosition' />
                                <button type='submit' style='border: none; background: none; padding: 0;'>
                                    <img src='~/images/edit.png' height='40' />
                                </button>

                            </form>
                        </td>
                        <td>
                            <form method="post" asp-action='RemoveFromTeam'>
                                <input type='hidden' name='id' value='@pokemon.teamPosition' />
                                <input type='hidden' name='returnPage' value='team' />
                                <button type='submit' style='border: none; background: none; padding: 0;'>
                                    <img src='~/images/delete_icon.png' height='40' />
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            </table>
        </div>
    }
</body>