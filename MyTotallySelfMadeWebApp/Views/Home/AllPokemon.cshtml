@using System.Drawing
@model List<PokeApiNet.Pokemon>
@{
    var TypeColors = ViewBag.TypeColors as Dictionary<string, Color>;

}

<body>
    <div class="text-center">
        <h1 class="display-4"></h1>
        <div class="table-container">
            <table>
                <tr>
                    <th class="dex-column">Dex Nr.</th>
                    <th>Artwork</th>
                    <th>Pokemon Name</th>
                    <th>Type(s)</th>
                </tr>
                @functions {
                    private string GetTd(int id, string spriteUrl, string name)
                    {
                        return $"<td class='dex-column'>{id}</td><td class='art-column'><img src={spriteUrl} height=50/></td><td class='Name-column'>{name}</td>";
                    }

                    private string GetTypeColorStyle(Dictionary<string, Color> typeColors, string typeName)
                    {
                        if (typeColors.TryGetValue(typeName, out var color))
                        {
                            return $"rgba({color.R},{color.G},{color.B},{color.A})";
                        }
                        return "transparent";
                    }
                }

                @foreach (var pokemon in Model)
                {
                    var tdContent = GetTd(pokemon.Id, pokemon.Sprites.Other.OfficialArtwork.FrontDefault, pokemon.Name);
                    if (pokemon.Types.Count == 1)
                    {
                        var typeColor = GetTypeColorStyle(TypeColors, pokemon.Types[0].Type.Name);
                        <tr style="background-color: @typeColor;">
                            @Html.Raw(tdContent)
                            <td class="type-column">
                                @pokemon.Types[0].Type.Name
                            </td>
                        </tr>
                    }
                    else
                    {
                        var typeColor1 = GetTypeColorStyle(TypeColors, pokemon.Types[0].Type.Name);
                        var typeColor2 = GetTypeColorStyle(TypeColors, pokemon.Types[1].Type.Name);
                        <tr style="background-color: #D9AFD9;background-image: linear-gradient(45deg, @typeColor1 0%, @typeColor2 100%);">
                            @Html.Raw(tdContent)
                            <td class="type-column">
                                @($"{pokemon.Types[0].Type.Name} + {pokemon.Types[1].Type.Name}")
                            </td>
                        </tr>
                    }
                }
            </table>
        </div>
    </div>
</body>
<style>
    .text-center {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .table-container {
        display: flex;
        justify-content: center;
        width: 100%;
    }

    table {
        border-collapse: collapse;
        width: 50%;
    }

    th, td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    .dex-column {
        width: 12%;
    }

    .art-column {
        width: 12%;
    }

    .type-column {
        width: 25%;
    }

    body {
        background-image: url('/images/pokewall.jpg');
        background-size: cover;
        background-attachment: fixed;
    }
</style>
